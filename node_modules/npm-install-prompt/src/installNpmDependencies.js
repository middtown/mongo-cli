export async function installNpmDependencies({devDependencies, dependencies}) {

  //region Imports
  const {join} = require('path')
  const {execSync} = require('child_process')
  const {spawnSync} = require('child_process')
  const fs = require('fs')
  const s = require('string')
  const _ = require('lodash')
  const cwd = require('cwd')
  const c = require('chalk')
  const prompt = require('./util/prompt')
  const {logHeading, padlog, log} = require('./util/logging')
  //endregion

  // Create list of dev deps and runtime deps in one list for further processing.
  devDependencies = devDependencies.map(([name, version]) => ({name, version, dev: true}))
  dependencies = dependencies.map(([name, version]) => ({name, version, dev: false}))
  const allDeps = devDependencies.concat(dependencies)

  // Check if modules are npm linked.
  const npmGlobalRoot = s(execSync('npm root -g', {encoding: 'utf8'})).trim().s
  //const linkedDeps  = allDeps.map(({name, version, dev}) => fs.existsSync(join(npmGlobalRoot, name)) ? true : false)

  let choices = allDeps.map(({name, version, dev}) => {
    const linkedPath = join(npmGlobalRoot, name)
    const isLinked = fs.existsSync(linkedPath)
    const realPath = isLinked ? fs.realpathSync(join(npmGlobalRoot, name)) : null
    const localModulePath = join(cwd(), 'node_modules', name)
    const installed = fs.existsSync(localModulePath)
    const installedViaLink = installed ? fs.lstatSync(localModulePath).isSymbolicLink() : false
    let installStatusStr = c.red(' not installed')
    if (installedViaLink) {
      installStatusStr = c.green(' already installed via link')
    } else if (installed) {
      installStatusStr = c.green(' already installed')
    }

    return {
      name: s(name + c.yellow(`${dev ? ' devDep' : ''}`) + installStatusStr).padRight(50),
      value: {name, version, dev},
      checked: !installed, // Used for filtering defaults.
      installed,
      realPath,
      installedViaLink,
      isLinked,
      // TODO(vjpr): On my machine v2.0.1 linked modules are always available.
      //   In the future only allow modules that are in the prefix.
      //disabled: !fs.existsSync(join(npmGlobalRoot, name)),
    }
  })

  {
    if (_.every(choices, ch => ch.installed)) {
      const ans = await prompt({name: 'proceed', type: 'confirm', message: 'All dependencies are installed. Proceed? (If you still want to install/link any choose "no".)', default: true})
      if (ans.proceed) return
    }
  }

  {
    const ans = await prompt([{
      name: 'deps',
      type: 'checkbox',
      message: 'Which dependencies do you want to install or link (you can choose to install or link next)?',
      choices,
    }])
    // TODO(vjpr): Difference
    choices = _.intersectionWith(choices, ans.deps, (a, b) => a.value.name === b.name)
  }

  if (!choices.length) {
    log()
    log('Nothing to install.')
    return
  }

  choices.forEach(ch => {
    ch.name = ch.name + (ch.isLinked ? c.grey(' Globally linked at: ' + ch.realPath) : c.yellow(' not globally linked'))
    ch.checked = ch.isLinked
  })

  padlog('Global dependencies are installed here:', npmGlobalRoot)

  const ans = await prompt([{
    name: 'depsToLink',
    type: 'checkbox',
    message: 'Which dependencies do you want to `npm link` instead of `npm install`?',
    choices,
  }])

  const depsToLink = ans.depsToLink
  const depsToInstall = _.differenceWith(choices, depsToLink, (a, b) => a.value.name === b.name)

  const depsToLinkNames = _.map(depsToLink, 'name')
  const depsToInstallNames = _.map(depsToInstall, d =>
    d.value.name + (d.value.version ? '@' + d.value.version : '')
  )

  log()

  if (depsToLink.length)
    log('These dependencies will be linked:', c.yellow(depsToLinkNames.join(', ')))

  if (depsToInstall.length)
    log('These dependencies will be installed:', c.yellow(depsToInstallNames.join(', ')))

  log()

  {
    const ans = await prompt([{type: 'confirm', name: 'confirm', message: `Do you want to begin install/link phase?`}])
    if (ans.confirm) {
      let cmd
      if (depsToInstall.length) {
        cmd = 'npm install ' + depsToInstallNames.join(' ')
        padlog('=>', cmd)
        spawnSync('npm', ['install'].concat(depsToInstallNames), {stdio: 'inherit'})
      }
      if (depsToLink.length) {
        cmd = 'npm link ' + depsToLinkNames.join(' ')
        padlog('=>', cmd)
        spawnSync('npm', ['link'].concat(depsToLinkNames), {stdio: 'inherit'})
      }
    }
  }

}
