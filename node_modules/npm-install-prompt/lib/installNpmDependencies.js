'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _bluebird = require('bluebird');

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.installNpmDependencies = undefined;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var installNpmDependencies = exports.installNpmDependencies = function () {
  var ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(_ref) {
    var devDependencies = _ref.devDependencies;
    var dependencies = _ref.dependencies;

    var _require,

    //region Imports
    join, _require2, execSync, _require3, spawnSync, fs, s, _, cwd, c, prompt, _require4, logHeading, padlog, log, allDeps, npmGlobalRoot, choices, _ans, _ans2, ans, depsToLink, depsToInstall, depsToLinkNames, depsToInstallNames, _ans3, cmd;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _require = require('path');
            join = _require.join;
            _require2 = require('child_process');
            execSync = _require2.execSync;
            _require3 = require('child_process');
            spawnSync = _require3.spawnSync;
            fs = require('fs');
            s = require('string');
            _ = require('lodash');
            cwd = require('cwd');
            c = require('chalk');
            prompt = require('./util/prompt');
            _require4 = require('./util/logging');
            logHeading = _require4.logHeading;
            padlog = _require4.padlog;
            log = _require4.log;
            //endregion

            // Create list of dev deps and runtime deps in one list for further processing.

            devDependencies = devDependencies.map(function (_ref2) {
              var _ref3 = (0, _slicedToArray3.default)(_ref2, 2);

              var name = _ref3[0];
              var version = _ref3[1];
              return { name: name, version: version, dev: true };
            });
            dependencies = dependencies.map(function (_ref4) {
              var _ref5 = (0, _slicedToArray3.default)(_ref4, 2);

              var name = _ref5[0];
              var version = _ref5[1];
              return { name: name, version: version, dev: false };
            });
            allDeps = devDependencies.concat(dependencies);

            // Check if modules are npm linked.

            npmGlobalRoot = s(execSync('npm root -g', { encoding: 'utf8' })).trim().s;
            //const linkedDeps  = allDeps.map(({name, version, dev}) => fs.existsSync(join(npmGlobalRoot, name)) ? true : false)

            choices = allDeps.map(function (_ref6) {
              var name = _ref6.name;
              var version = _ref6.version;
              var dev = _ref6.dev;

              var linkedPath = join(npmGlobalRoot, name);
              var isLinked = fs.existsSync(linkedPath);
              var realPath = isLinked ? fs.realpathSync(join(npmGlobalRoot, name)) : null;
              var localModulePath = join(cwd(), 'node_modules', name);
              var installed = fs.existsSync(localModulePath);
              var installedViaLink = installed ? fs.lstatSync(localModulePath).isSymbolicLink() : false;
              var installStatusStr = c.red(' not installed');
              if (installedViaLink) {
                installStatusStr = c.green(' already installed via link');
              } else if (installed) {
                installStatusStr = c.green(' already installed');
              }

              return {
                name: s(name + c.yellow('' + (dev ? ' devDep' : '')) + installStatusStr).padRight(50),
                value: { name: name, version: version, dev: dev },
                checked: !installed, // Used for filtering defaults.
                installed: installed,
                realPath: realPath,
                installedViaLink: installedViaLink,
                isLinked: isLinked
              };
            });

            if (!_.every(choices, function (ch) {
              return ch.installed;
            })) {
              _context.next = 27;
              break;
            }

            _context.next = 24;
            return prompt({ name: 'proceed', type: 'confirm', message: 'All dependencies are installed. Proceed? (If you still want to install/link any choose "no".)', default: true });

          case 24:
            _ans = _context.sent;

            if (!_ans.proceed) {
              _context.next = 27;
              break;
            }

            return _context.abrupt('return');

          case 27:
            _context.next = 29;
            return prompt([{
              name: 'deps',
              type: 'checkbox',
              message: 'Which dependencies do you want to install or link (you can choose to install or link next)?',
              choices: choices
            }]);

          case 29:
            _ans2 = _context.sent;

            // TODO(vjpr): Difference
            choices = _.intersectionWith(choices, _ans2.deps, function (a, b) {
              return a.value.name === b.name;
            });

            if (choices.length) {
              _context.next = 35;
              break;
            }

            log();
            log('Nothing to install.');
            return _context.abrupt('return');

          case 35:

            choices.forEach(function (ch) {
              ch.name = ch.name + (ch.isLinked ? c.grey(' Globally linked at: ' + ch.realPath) : c.yellow(' not globally linked'));
              ch.checked = ch.isLinked;
            });

            padlog('Global dependencies are installed here:', npmGlobalRoot);

            _context.next = 39;
            return prompt([{
              name: 'depsToLink',
              type: 'checkbox',
              message: 'Which dependencies do you want to `npm link` instead of `npm install`?',
              choices: choices
            }]);

          case 39:
            ans = _context.sent;
            depsToLink = ans.depsToLink;
            depsToInstall = _.differenceWith(choices, depsToLink, function (a, b) {
              return a.value.name === b.name;
            });
            depsToLinkNames = _.map(depsToLink, 'name');
            depsToInstallNames = _.map(depsToInstall, function (d) {
              return d.value.name + (d.value.version ? '@' + d.value.version : '');
            });


            log();

            if (depsToLink.length) log('These dependencies will be linked:', c.yellow(depsToLinkNames.join(', ')));

            if (depsToInstall.length) log('These dependencies will be installed:', c.yellow(depsToInstallNames.join(', ')));

            log();

            _context.next = 50;
            return prompt([{ type: 'confirm', name: 'confirm', message: 'Do you want to begin install/link phase?' }]);

          case 50:
            _ans3 = _context.sent;

            if (_ans3.confirm) {
              cmd = void 0;

              if (depsToInstall.length) {
                cmd = 'npm install ' + depsToInstallNames.join(' ');
                padlog('=>', cmd);
                spawnSync('npm', ['install'].concat(depsToInstallNames), { stdio: 'inherit' });
              }
              if (depsToLink.length) {
                cmd = 'npm link ' + depsToLinkNames.join(' ');
                padlog('=>', cmd);
                spawnSync('npm', ['link'].concat(depsToLinkNames), { stdio: 'inherit' });
              }
            }

          case 52:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return function installNpmDependencies(_x) {
    return ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=installNpmDependencies.js.map
