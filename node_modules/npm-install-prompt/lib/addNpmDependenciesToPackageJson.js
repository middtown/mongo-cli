'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _bluebird = require('bluebird');

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addNpmDependenciesToPackageJson = undefined;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var addNpmDependenciesToPackageJson = exports.addNpmDependenciesToPackageJson = function () {
  var ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(_ref) {
    var dependencies = _ref.dependencies;
    var devDependencies = _ref.devDependencies;
    var reject = _ref.reject;

    var _require,

    //region Imports
    logHeading, padlog, log, _require2, promisify, modifyPackageJson, _, convertToPackageJsonDepFormat;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            convertToPackageJsonDepFormat = function convertToPackageJsonDepFormat(deps) {
              var o = {};
              deps.forEach(function (_ref2) {
                var _ref3 = (0, _slicedToArray3.default)(_ref2, 2);

                var name = _ref3[0];
                var version = _ref3[1];
                return o[name] = version || '*';
              });
              return o;
            };

            _require = require('./util/logging');
            logHeading = _require.logHeading;
            padlog = _require.padlog;
            log = _require.log;
            _require2 = require('bluebird');
            promisify = _require2.promisify;
            modifyPackageJson = require('./util/modifyPackageJson');
            _ = require('lodash');
            //endregion

            if (Array.isArray(dependencies)) dependencies = convertToPackageJsonDepFormat(dependencies);
            if (Array.isArray(devDependencies)) devDependencies = convertToPackageJsonDepFormat(devDependencies);

            _context.next = 13;
            return promisify(modifyPackageJson)(function (json) {
              json.dependencies = _.merge({}, json.dependencies, dependencies);
              json.devDependencies = _.merge({}, json.devDependencies, devDependencies);
              reject.dependencies.forEach(function (d) {
                delete json.dependencies[d];
              });
              reject.devDependencies.forEach(function (d) {
                delete json.devDependencies[d];
              });
              return json;
            });

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return function addNpmDependenciesToPackageJson(_x) {
    return ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=addNpmDependenciesToPackageJson.js.map
